/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core, connectionPluginCore } from "nexus"
import type { RelayGlobalIdNexusFieldConfig } from "@jcm/nexus-plugin-relay-global-id"
import type { QueryComplexity } from "nexus/dist/plugins/queryComplexityPlugin"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> & { totalCount?: connectionPluginCore.ConnectionFieldResolver<TypeName, FieldName, "totalCount"> }
    ): void
    relayGlobalId<FieldName extends string>(
            fieldName: FieldName, 
            config: RelayGlobalIdNexusFieldConfig<TypeName, FieldName>
          ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Role: "ADMIN" | "MASTER" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: Date
}

export interface NexusGenObjects {
  LoginResponse: { // root type
    token?: string | null; // String
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Post: { // root type
    body: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  PostEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Post'] | null; // Post
  }
  Query: {};
  QueryPostConnection_Connection: { // root type
    edges?: Array<NexusGenRootTypes['PostEdge'] | null> | null; // [PostEdge]
    nodes?: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  QuerySolanaTransferConnection_Connection: { // root type
    edges?: Array<NexusGenRootTypes['SolanaTransferEdge'] | null> | null; // [SolanaTransferEdge]
    nodes?: Array<NexusGenRootTypes['SolanaTransfer'] | null> | null; // [SolanaTransfer]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  QueryUserConnection_Connection: { // root type
    edges?: Array<NexusGenRootTypes['UserEdge'] | null> | null; // [UserEdge]
    nodes?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  QueryUserWalletsConnection_Connection: { // root type
    edges?: Array<NexusGenRootTypes['UserWalletsEdge'] | null> | null; // [UserWalletsEdge]
    nodes?: Array<NexusGenRootTypes['UserWallets'] | null> | null; // [UserWallets]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  SolanaTransfer: { // root type
    amountLamport: number; // Float!
    signature: string; // String!
  }
  SolanaTransferEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['SolanaTransfer'] | null; // SolanaTransfer
  }
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    iconUrl?: string | null; // String
    name: string; // String!
    role?: NexusGenEnums['Role'] | null; // Role
    uid: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UserEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['User'] | null; // User
  }
  UserWallets: { // root type
    chainType: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    epct: number; // Float!
    imgUrl: string; // String!
    name: string; // String!
    priority: number; // Int!
    privateKey: string; // String!
    pubkey: string; // String!
    sol: number; // Float!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    usdc: number; // Float!
    userId?: number | null; // Int
  }
  UserWalletsEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['UserWallets'] | null; // UserWallets
  }
}

export interface NexusGenInterfaces {
  Node: any;
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  LoginResponse: { // field return type
    token: string | null; // String
  }
  Mutation: { // field return type
    airdrop: NexusGenRootTypes['UserWallets'] | null; // UserWallets
    createPost: NexusGenRootTypes['Post'] | null; // Post
    createSolanaTransfer: NexusGenRootTypes['SolanaTransfer'] | null; // SolanaTransfer
    createUser: NexusGenRootTypes['User'] | null; // User
    createUserWallets: NexusGenRootTypes['UserWallets'] | null; // UserWallets
    createWallet: NexusGenRootTypes['UserWallets'] | null; // UserWallets
    deletePost: NexusGenRootTypes['Post'] | null; // Post
    deleteSolanaTransfer: NexusGenRootTypes['SolanaTransfer'] | null; // SolanaTransfer
    deleteUser: NexusGenRootTypes['User'] | null; // User
    deleteUserWallets: NexusGenRootTypes['UserWallets'] | null; // UserWallets
    login: NexusGenRootTypes['LoginResponse'] | null; // LoginResponse
    saveSkeetSolanaTransfer: boolean | null; // Boolean
    updateBalance: NexusGenRootTypes['UserWallets'] | null; // UserWallets
    updatePost: NexusGenRootTypes['Post'] | null; // Post
    updateSolanaTransfer: NexusGenRootTypes['SolanaTransfer'] | null; // SolanaTransfer
    updateUser: NexusGenRootTypes['User'] | null; // User
    updateUserWallets: NexusGenRootTypes['UserWallets'] | null; // UserWallets
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Post: { // field return type
    body: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string | null; // ID
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
  }
  PostEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Post'] | null; // Post
  }
  Query: { // field return type
    getPost: NexusGenRootTypes['Post'] | null; // Post
    getSolanaTransfer: NexusGenRootTypes['SolanaTransfer'] | null; // SolanaTransfer
    getUser: NexusGenRootTypes['User'] | null; // User
    getUserWallets: NexusGenRootTypes['UserWallets'] | null; // UserWallets
    node: NexusGenRootTypes['Node'] | null; // Node
    nodes: Array<NexusGenRootTypes['Node'] | null>; // [Node]!
    postConnection: NexusGenRootTypes['QueryPostConnection_Connection'] | null; // QueryPostConnection_Connection
    postTweet: boolean | null; // Boolean
    solanaTokenTransfer: boolean | null; // Boolean
    solanaTransferConnection: NexusGenRootTypes['QuerySolanaTransferConnection_Connection'] | null; // QuerySolanaTransferConnection_Connection
    userConnection: NexusGenRootTypes['QueryUserConnection_Connection'] | null; // QueryUserConnection_Connection
    userWalletsConnection: NexusGenRootTypes['QueryUserWalletsConnection_Connection'] | null; // QueryUserWalletsConnection_Connection
    walletSolanaTokenTransfer: boolean | null; // Boolean
  }
  QueryPostConnection_Connection: { // field return type
    edges: Array<NexusGenRootTypes['PostEdge'] | null> | null; // [PostEdge]
    nodes: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number | null; // Int
  }
  QuerySolanaTransferConnection_Connection: { // field return type
    edges: Array<NexusGenRootTypes['SolanaTransferEdge'] | null> | null; // [SolanaTransferEdge]
    nodes: Array<NexusGenRootTypes['SolanaTransfer'] | null> | null; // [SolanaTransfer]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number | null; // Int
  }
  QueryUserConnection_Connection: { // field return type
    edges: Array<NexusGenRootTypes['UserEdge'] | null> | null; // [UserEdge]
    nodes: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number | null; // Int
  }
  QueryUserWalletsConnection_Connection: { // field return type
    edges: Array<NexusGenRootTypes['UserWalletsEdge'] | null> | null; // [UserWalletsEdge]
    nodes: Array<NexusGenRootTypes['UserWallets'] | null> | null; // [UserWallets]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number | null; // Int
  }
  SolanaTransfer: { // field return type
    amountLamport: number; // Float!
    fromUser: NexusGenRootTypes['User']; // User!
    id: string | null; // ID
    signature: string; // String!
    toUser: NexusGenRootTypes['User']; // User!
  }
  SolanaTransferEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['SolanaTransfer'] | null; // SolanaTransfer
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    fromTransfers: NexusGenRootTypes['SolanaTransfer'][]; // [SolanaTransfer!]!
    iconUrl: string | null; // String
    id: string | null; // ID
    name: string; // String!
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
    role: NexusGenEnums['Role'] | null; // Role
    toTransfers: NexusGenRootTypes['SolanaTransfer'][]; // [SolanaTransfer!]!
    uid: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userWallets: NexusGenRootTypes['UserWallets'][]; // [UserWallets!]!
  }
  UserEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['User'] | null; // User
  }
  UserWallets: { // field return type
    chainType: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    epct: number; // Float!
    id: string | null; // ID
    imgUrl: string; // String!
    name: string; // String!
    priority: number; // Int!
    privateKey: string; // String!
    pubkey: string; // String!
    sol: number; // Float!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    usdc: number; // Float!
    userId: number | null; // Int
  }
  UserWalletsEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['UserWallets'] | null; // UserWallets
  }
  Node: { // field return type
    id: string | null; // ID
  }
}

export interface NexusGenFieldTypeNames {
  LoginResponse: { // field return type name
    token: 'String'
  }
  Mutation: { // field return type name
    airdrop: 'UserWallets'
    createPost: 'Post'
    createSolanaTransfer: 'SolanaTransfer'
    createUser: 'User'
    createUserWallets: 'UserWallets'
    createWallet: 'UserWallets'
    deletePost: 'Post'
    deleteSolanaTransfer: 'SolanaTransfer'
    deleteUser: 'User'
    deleteUserWallets: 'UserWallets'
    login: 'LoginResponse'
    saveSkeetSolanaTransfer: 'Boolean'
    updateBalance: 'UserWallets'
    updatePost: 'Post'
    updateSolanaTransfer: 'SolanaTransfer'
    updateUser: 'User'
    updateUserWallets: 'UserWallets'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Post: { // field return type name
    body: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    title: 'String'
    updatedAt: 'DateTime'
    user: 'User'
  }
  PostEdge: { // field return type name
    cursor: 'String'
    node: 'Post'
  }
  Query: { // field return type name
    getPost: 'Post'
    getSolanaTransfer: 'SolanaTransfer'
    getUser: 'User'
    getUserWallets: 'UserWallets'
    node: 'Node'
    nodes: 'Node'
    postConnection: 'QueryPostConnection_Connection'
    postTweet: 'Boolean'
    solanaTokenTransfer: 'Boolean'
    solanaTransferConnection: 'QuerySolanaTransferConnection_Connection'
    userConnection: 'QueryUserConnection_Connection'
    userWalletsConnection: 'QueryUserWalletsConnection_Connection'
    walletSolanaTokenTransfer: 'Boolean'
  }
  QueryPostConnection_Connection: { // field return type name
    edges: 'PostEdge'
    nodes: 'Post'
    pageInfo: 'PageInfo'
    totalCount: 'Int'
  }
  QuerySolanaTransferConnection_Connection: { // field return type name
    edges: 'SolanaTransferEdge'
    nodes: 'SolanaTransfer'
    pageInfo: 'PageInfo'
    totalCount: 'Int'
  }
  QueryUserConnection_Connection: { // field return type name
    edges: 'UserEdge'
    nodes: 'User'
    pageInfo: 'PageInfo'
    totalCount: 'Int'
  }
  QueryUserWalletsConnection_Connection: { // field return type name
    edges: 'UserWalletsEdge'
    nodes: 'UserWallets'
    pageInfo: 'PageInfo'
    totalCount: 'Int'
  }
  SolanaTransfer: { // field return type name
    amountLamport: 'Float'
    fromUser: 'User'
    id: 'ID'
    signature: 'String'
    toUser: 'User'
  }
  SolanaTransferEdge: { // field return type name
    cursor: 'String'
    node: 'SolanaTransfer'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    fromTransfers: 'SolanaTransfer'
    iconUrl: 'String'
    id: 'ID'
    name: 'String'
    posts: 'Post'
    role: 'Role'
    toTransfers: 'SolanaTransfer'
    uid: 'String'
    updatedAt: 'DateTime'
    userWallets: 'UserWallets'
  }
  UserEdge: { // field return type name
    cursor: 'String'
    node: 'User'
  }
  UserWallets: { // field return type name
    chainType: 'String'
    createdAt: 'DateTime'
    epct: 'Float'
    id: 'ID'
    imgUrl: 'String'
    name: 'String'
    priority: 'Int'
    privateKey: 'String'
    pubkey: 'String'
    sol: 'Float'
    updatedAt: 'DateTime'
    usdc: 'Float'
    userId: 'Int'
  }
  UserWalletsEdge: { // field return type name
    cursor: 'String'
    node: 'UserWallets'
  }
  Node: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPost: { // args
      body: string; // String!
      title: string; // String!
      userId?: number | null; // Int
    }
    createSolanaTransfer: { // args
      amountLamport: number; // Float!
      fromUserId: number; // Int!
      signature: string; // String!
      toUserId: number; // Int!
    }
    createUser: { // args
      email: string; // String!
      iconUrl?: string | null; // String
      name: string; // String!
      role?: string | null; // String
      uid: string; // String!
    }
    createUserWallets: { // args
      chainType: string; // String!
      epct: number; // Float!
      imgUrl: string; // String!
      name: string; // String!
      priority: number; // Int!
      privateKey: string; // String!
      pubkey: string; // String!
      sol: number; // Float!
      usdc: number; // Float!
      userId?: number | null; // Int
    }
    createWallet: { // args
      imgUrl?: string | null; // String
      name: string; // String!
    }
    deletePost: { // args
      id: string; // String!
    }
    deleteSolanaTransfer: { // args
      id: string; // String!
    }
    deleteUser: { // args
      id: string; // String!
    }
    deleteUserWallets: { // args
      id: string; // String!
    }
    login: { // args
      token?: string | null; // String
    }
    saveSkeetSolanaTransfer: { // args
      fromAddressPubkey: string; // String!
      id?: number | null; // Int
      signature: string; // String!
      timestamp?: string | null; // String
      toAddressPubkey: string; // String!
      tokenMintAddress: string; // String!
      transferAmountLamport: number; // Int!
      usdcPrice: number; // Float!
    }
    updateBalance: { // args
      userWalletId: string; // String!
    }
    updatePost: { // args
      body?: string | null; // String
      id: string; // String!
      userId?: number | null; // Int
    }
    updateSolanaTransfer: { // args
      fromUserId?: number | null; // Int
      id: string; // String!
      signature?: string | null; // String
      toUserId?: number | null; // Int
    }
    updateUser: { // args
      email?: string | null; // String
      iconUrl?: string | null; // String
      id: string; // String!
      name?: string | null; // String
      role?: string | null; // String
    }
    updateUserWallets: { // args
      chainType?: string | null; // String
      epct?: number | null; // Float
      id: string; // String!
      imgUrl?: string | null; // String
      priority?: number | null; // Int
      privateKey?: string | null; // String
      pubkey?: string | null; // String
      sol?: number | null; // Float
      usdc?: number | null; // Float
      userId?: number | null; // Int
    }
  }
  Query: {
    getPost: { // args
      id: string; // String!
    }
    getSolanaTransfer: { // args
      id: string; // String!
    }
    getUser: { // args
      id: string; // String!
    }
    getUserWallets: { // args
      id: string; // String!
    }
    node: { // args
      id: string; // ID!
    }
    nodes: { // args
      ids: string[]; // [ID!]!
    }
    postConnection: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
    postTweet: { // args
      id: string; // String!
      text: string; // String!
    }
    solanaTokenTransfer: { // args
      decimal: number; // Int!
      encodedFromSecretKeyString: string; // String!
      iv: string; // String!
      rpcUrl: string; // String!
      toAddressPubkey: string; // String!
      tokenMintAddress: string; // String!
      transferAmountLamport: number; // Int!
    }
    solanaTransferConnection: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
    userConnection: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
    userWalletsConnection: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
    walletSolanaTokenTransfer: { // args
      toUserId: string; // String!
      transferAmountLamport: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "Node";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
    
    /**
     * The complexity for an individual field. Return a number
     * or a function that returns a number to specify the
     * complexity for this field.
     */
    complexity?: QueryComplexity<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}